
######## hutool-aop-5.7.16.postfixTemplates ######## 


######## cn.hutool.core.exceptions.ExceptionUtil
.getMessage : ht>获得完整消息,包括异常名,消息格式为:{SimpleClassName}:{ThrowableMessage}
	java.lang.Throwable [cn.hutool.core.exceptions.ExceptionUtil]  →  cn.hutool.core.exceptions.ExceptionUtil.getMessage($expr$) 


######## cn.hutool.core.date.LocalDateTimeUtil
.ofDate : ht>TemporalAccessor转LocalDate,使用默认时区
	java.time.temporal.TemporalAccessor [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.ofDate($expr$) 

.offset : ht>日期偏移,根据field不同加不同值(偏移会修改传入的对象)
	java.time.LocalDateTime [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.offset($expr$, $arg$) 

.ofUTC : ht>Instant转LocalDateTime,使用UTC时区
	java.time.Instant [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.ofUTC($expr$) 
	LONG [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.ofUTC($expr$) 

.betweenPeriod : ht>获取两个日期的表象时间差,如果结束时间早于开始时间,获取结果为负
	java.time.LocalDate [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.betweenPeriod($expr$, $arg$) 

.formatNormal : ht>格式化日期时间为yyyy-MM-dd格式
	java.time.LocalDate [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.formatNormal($expr$) 
	java.time.LocalDateTime [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.formatNormal($expr$) 

.format : ht>格式化日期时间为指定格式
	java.time.LocalDate [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.format($expr$, $arg$) 
	java.time.LocalDateTime [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.format($expr$, $arg$) 

.toEpochMilli : ht>TemporalAccessor转换为时间戳(从1970-01-01T00:00:00Z开始的毫秒数)
	java.time.temporal.TemporalAccessor [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.toEpochMilli($expr$) 

.parse : ht>解析日期时间字符串为LocalDateTime
	java.lang.CharSequence [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.parse($expr$, $arg$) 

.isWeekend : ht>是否为周末(周六或周日)
	java.time.LocalDate [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.isWeekend($expr$) 
	java.time.LocalDateTime [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.isWeekend($expr$) 

.dayOfWeek : ht>获取LocalDate对应的星期值
	java.time.LocalDate [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.dayOfWeek($expr$) 

.parseDate : ht>解析日期字符串为LocalDate
	java.lang.CharSequence [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.parseDate($expr$, $arg$) 

.of : ht>Instant转LocalDateTime
	java.util.Date [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.of($expr$) 
	java.time.ZonedDateTime [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.of($expr$) 
	java.time.Instant [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.of($expr$, $arg$) 
	LONG [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.of($expr$, $arg$) 
	java.time.temporal.TemporalAccessor [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.of($expr$) 

.endOfDay : ht>修改为一天的结束时间,例如:2020-02-0223:59:59,999
	java.time.LocalDateTime [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.endOfDay($expr$) 

.between : ht>获取两个日期的差,如果结束时间早于开始时间,获取结果为负
	java.time.LocalDateTime [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.between($expr$, $arg$) 

.beginOfDay : ht>修改为一天的开始时间,例如:2020-02-0200:00:00,000
	java.time.LocalDateTime [cn.hutool.core.date.LocalDateTimeUtil]  →  cn.hutool.core.date.LocalDateTimeUtil.beginOfDay($expr$) 



######## cn.hutool.core.collection.CollUtil
.unionAll : ht>多个集合的完全并集,类似于SQL中的"UNIONALL"
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.unionAll($expr$, $arg$) 

.asEnumeration : ht>Iterator转换为Enumeration
	java.util.Iterator [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.asEnumeration($expr$) 

.newLinkedHashSet : ht>新建一个LinkedHashSet
	ARRAY [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.newLinkedHashSet($expr$) 

.fieldValueMap : ht>字段值与列表值对应的Map,常用于元素对象中有唯一ID时需要按照这个ID查找对象的情况
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.fieldValueMap($expr$, $arg$) 

.toList : ht>数组转为ArrayList
	ARRAY [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.toList($expr$) 

.getLast : ht>获取集合的最后一个元素
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.getLast($expr$) 

.empty : ht>根据给定的集合类型,返回对应的空集合,支持类型包括
	java.lang.Class [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.empty($expr$) 

.sortByPinyin : ht>根据汉字的拼音顺序排序
	java.util.List [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.sortByPinyin($expr$) 
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.sortByPinyin($expr$) 

.unmodifiable : ht>转为只读集合
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.unmodifiable($expr$) 

.split : ht>对集合按照指定长度分段,每一个段为单独的集合,返回这个集合的列表
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.split($expr$, $arg$) 

.addAllIfNotContains : ht>将另一个列表中的元素加入到列表中,如果列表中已经存在此元素则忽略之
	java.util.List [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.addAllIfNotContains($expr$, $arg$) 

.getFirst : ht>获取集合的第一个元素
	java.util.Iterator [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.getFirst($expr$) 
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.getFirst($expr$) 

.sortByProperty : ht>根据Bean的属性排序
	java.util.List [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.sortByProperty($expr$, $arg$) 
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.sortByProperty($expr$, $arg$) 

.popPart : ht>切取部分数据
	java.util.Deque [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.popPart($expr$, $arg$) 
	java.util.Stack [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.popPart($expr$, $arg$) 

.intersection : ht>两个集合的交集
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.intersection($expr$, $arg$) 

.create : ht>创建新的集合对象
	java.lang.Class [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.create($expr$) 

.newLinkedList : ht>新建LinkedList
	ARRAY [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.newLinkedList($expr$) 

.join : ht>以conjunction为分隔符将集合转换为字符串
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.join($expr$, $arg$) 

.indexOf : ht>获取匹配规则定义中匹配到元素的第一个位置
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.indexOf($expr$, $arg$) 

.toTreeSet : ht>将集合转换为排序后的TreeSet
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.toTreeSet($expr$, $arg$) 

.countMap : ht>根据集合返回一个元素计数的Map
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.countMap($expr$) 

.isEqualList : ht>判断两个Collection是否元素和顺序相同,返回true的条件是
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.isEqualList($expr$, $arg$) 

.group : ht>分组,按照Hash32接口定义的hash算法,集合中的元素放入hash值对应的子列表中
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.group($expr$, $arg$) 

.zip : ht>映射键值(参考Python的zip()函数)
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.zip($expr$, $arg$) 
	java.lang.String [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.zip($expr$, $arg$) 

.getElementType : ht>获得Iterable对象的元素类型(通过第一个非空元素判断)
	java.util.Iterator [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.getElementType($expr$) 
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.getElementType($expr$) 

.fieldValueAsMap : ht>两个字段值组成新的Map
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.fieldValueAsMap($expr$, $arg$) 

.asIterable : ht>Iterator转为Iterable
	java.util.Iterator [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.asIterable($expr$) 

.edit : ht>编辑,此方法产生一个新集合
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.edit($expr$, $arg$) 

.toMapList : ht>列转行。将Map中值列表分别按照其位置与key组成新的map
	java.util.Map [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.toMapList($expr$) 

.removeEmpty : ht>去除null或者""元素,此方法直接修改原集合
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.removeEmpty($expr$) 

.intersectionDistinct : ht>多个集合的交集
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.intersectionDistinct($expr$, $arg$) 

.findOneByField : ht>查找第一个匹配元素对象
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.findOneByField($expr$, $arg$) 

.subtract : ht>计算集合的单差集,即只返回【集合1】中有,但是【集合2】中没有的元素,例如
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.subtract($expr$, $arg$) 

.removeAny : ht>去掉集合中的多个元素,此方法直接修改原集合
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.removeAny($expr$, $arg$) 

.count : ht>集合中匹配规则的数量
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.count($expr$, $arg$) 

.containsAny : ht>其中一个集合在另一个集合中是否至少包含一个元素,即是两个集合是否至少有一个共同的元素
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.containsAny($expr$, $arg$) 

.asIterator : ht>Enumeration转换为Iterator
	java.util.Enumeration [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.asIterator($expr$) 

.subtractToList : ht>计算集合的单差集,即只返回【集合1】中有,但是【集合2】中没有的元素,例如
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.subtractToList($expr$, $arg$) 

.sort : ht>排序集合,排序不会修改原集合
	java.util.List [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.sort($expr$, $arg$) 
	java.util.Map [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.sort($expr$, $arg$) 
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.sort($expr$, $arg$) 

.list : ht>新建一个ArrayList
	BOOLEAN [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.list($expr$, $arg$) 

.groupByField : ht>根据元素的指定字段名分组,非Bean都放在第一个分组中
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.groupByField($expr$, $arg$) 

.valuesOfKeys : ht>从Map中获取指定键列表对应的值列表
	java.util.Map [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.valuesOfKeys($expr$, $arg$) 

.newHashSet : ht>新建一个HashSet
	ARRAY [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.newHashSet($expr$) 
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.newHashSet($expr$) 
	BOOLEAN [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.newHashSet($expr$, $arg$) 

.contains : ht>判断指定集合是否包含指定值,如果集合为空(null或者空),返回false,否则找到元素返回true
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.contains($expr$, $arg$) 

.extract : ht>通过Editor抽取集合元素中的某些值返回为新列表
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.extract($expr$, $arg$) 

.size : ht>获取Collection或者iterator的大小,此方法可以处理的对象类型如下
	java.lang.Object [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.size($expr$) 

.sortByEntry : ht>通过Entry排序,可以按照键排序,也可以按照值排序,亦或者两者综合排序
	java.util.Map [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.sortByEntry($expr$, $arg$) 

.unionDistinct : ht>多个集合的非重复并集,类似于SQL中的"UNIONDISTINCT"
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.unionDistinct($expr$, $arg$) 

.indexOfAll : ht>获取匹配规则定义中匹配到元素的所有位置
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.indexOfAll($expr$, $arg$) 

.sortEntryToList : ht>将Set排序(根据Entry的值)
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.sortEntryToList($expr$) 

.isNotEmpty : ht>Iterable是否为空
	java.util.Iterator [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.isNotEmpty($expr$) 
	java.util.Enumeration [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.isNotEmpty($expr$) 
	java.util.Map [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.isNotEmpty($expr$) 
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.isNotEmpty($expr$) 
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.isNotEmpty($expr$) 

.page : ht>对指定List分页取值
	INT [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.page($expr$, $arg$) 

.reverseNew : ht>反序给定List,会创建一个新的List,原List数据不变
	java.util.List [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.reverseNew($expr$) 

.getAny : ht>获取集合中指定多个下标的元素值,下标可以为负数,例如-1表示最后一个元素
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.getAny($expr$, $arg$) 

.trans : ht>使用给定的转换函数,转换源集合为新类型的集合
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.trans($expr$, $arg$) 

.sub : ht>截取集合的部分
	java.util.List [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.sub($expr$, $arg$) 
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.sub($expr$, $arg$) 

.hasNull : ht>是否包含null元素
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.hasNull($expr$) 

.values : ht>获取指定Map列表中所有的Value
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.values($expr$) 

.findOne : ht>查找第一个匹配元素对象
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.findOne($expr$, $arg$) 

.distinct : ht>去重集合
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.distinct($expr$) 

.getFieldValues : ht>获取给定Bean列表中指定字段名对应字段值的列表
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.getFieldValues($expr$, $arg$) 

.sortToMap : ht>通过Entry排序,可以按照键排序,也可以按照值排序,亦或者两者综合排序
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.sortToMap($expr$, $arg$) 

.padRight : ht>填充List,以达到最小长度
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.padRight($expr$, $arg$) 

.removeNull : ht>去除null元素,此方法直接修改原集合
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.removeNull($expr$) 

.min : ht>取最小值
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.min($expr$) 

.removeBlank : ht>去除null或者""或者空白字符串元素,此方法直接修改原集合
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.removeBlank($expr$) 

.toListMap : ht>行转列,合并相同的键,值合并为列表
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.toListMap($expr$) 

.toCollection : ht>Iterable转为Collection
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.toCollection($expr$) 

.get : ht>获取集合中指定下标的元素值,下标可以为负数,例如-1表示最后一个元素
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.get($expr$, $arg$) 

.setOrAppend : ht>设置或增加元素。当index小于List的长度时,替换指定位置的值,否则在尾部追加
	java.util.List [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.setOrAppend($expr$, $arg$) 

.map : ht>通过func自定义一个规则,此规则将原集合中的元素转换成新的元素,生成新的列表返回
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.map($expr$, $arg$) 

.keySet : ht>获取指定Map列表中所有的Key
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.keySet($expr$) 

.padLeft : ht>填充List,以达到最小长度
	java.util.List [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.padLeft($expr$, $arg$) 

.defaultIfEmpty : ht>如果给定集合为空,返回默认集合
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.defaultIfEmpty($expr$, $arg$) 

.set : ht>新建一个HashSet
	BOOLEAN [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.set($expr$, $arg$) 

.newArrayList : ht>新建一个ArrayList
	ARRAY [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.newArrayList($expr$) 
	java.util.Iterator [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.newArrayList($expr$) 
	java.util.Enumeration [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.newArrayList($expr$) 
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.newArrayList($expr$) 
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.newArrayList($expr$) 

.max : ht>取最大值
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.max($expr$) 

.disjunction : ht>两个集合的差集
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.disjunction($expr$, $arg$) 

.forEach : ht>循环遍历Iterable,使用Consumer接受遍历的每条数据,并针对每条数据做处理
	java.util.Iterator [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.forEach($expr$, $arg$) 
	java.util.Enumeration [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.forEach($expr$, $arg$) 
	java.util.Map [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.forEach($expr$, $arg$) 
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.forEach($expr$, $arg$) 

.containsAll : ht>集合1中是否包含集合2中所有的元素,即集合2是否为集合1的子集
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.containsAll($expr$, $arg$) 

.isEmpty : ht>集合是否为空
	java.util.Iterator [cn.hutool.core.collection.CollUtil]  →      if(cn.hutool.core.collection.CollUtil.isEmpty($expr$)){\
                                                                                $END$\
                                                                    }
	java.util.Enumeration [cn.hutool.core.collection.CollUtil]  →   if(cn.hutool.core.collection.CollUtil.isEmpty($expr$)){\
                                                                                $END$\
                                                                    }
	java.util.Map [cn.hutool.core.collection.CollUtil]  →           if(cn.hutool.core.collection.CollUtil.isEmpty($expr$)){\
                                                                                $END$\
                                                                    }
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →    if(cn.hutool.core.collection.CollUtil.isEmpty($expr$)){\
                                                                                $END$\
                                                                    }
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →      if(cn.hutool.core.collection.CollUtil.isEmpty($expr$)){\
                                                                                $END$\
                                                                    }

.clear : ht>清除一个或多个集合内的元素,每个集合调用clear()方法
	ARRAY [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.clear($expr$) 

.union : ht>两个集合的并集
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.union($expr$, $arg$) 

.reverse : ht>反序给定List,会在原List基础上直接修改
	java.util.List [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.reverse($expr$) 

.newBlockingQueue : ht>新建BlockingQueue
	INT [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.newBlockingQueue($expr$, $arg$) 

.emptyIfNull : ht>如果提供的集合为null,返回一个不可变的默认空集合,否则返回原集合
	java.util.List [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.emptyIfNull($expr$) 
	java.util.Set [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.emptyIfNull($expr$) 

.filter : ht>去除指定元素,此方法直接修改原集合
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.filter($expr$, $arg$) 

.lastIndexOf : ht>获取匹配规则定义中匹配到元素的最后位置
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.lastIndexOf($expr$, $arg$) 

.safeContains : ht>判断指定集合是否包含指定值,如果集合为空(null或者空),返回false,否则找到元素返回true
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.safeContains($expr$, $arg$) 

.newCopyOnWriteArrayList : ht>新建一个CopyOnWriteArrayList
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.newCopyOnWriteArrayList($expr$) 

.addAll : ht>加入全部
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.addAll($expr$, $arg$) 

.toMap : ht>将Entry集合转换为HashMap
	ARRAY [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.toMap($expr$) 
	java.lang.Iterable [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.toMap($expr$, $arg$) 

.sortPageAll : ht>将多个集合排序并显示不同的段落(分页)
	INT [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.sortPageAll($expr$, $arg$) 

.filterNew : ht>过滤
	java.util.Collection [cn.hutool.core.collection.CollUtil]  →  cn.hutool.core.collection.CollUtil.filterNew($expr$, $arg$) 



######## cn.hutool.core.util.StrUtil
.isNotBlank : ht>字符串判断是否为空串
	java.lang.String [cn.hutool.core.util.StrUtil]  →   if(cn.hutool.core.util.StrUtil.isNotBlank($expr$)){\
                                                                                $END$\
                                                        }
.isNotEmpty : ht>字符串判断是否为空
	java.lang.String [cn.hutool.core.util.StrUtil]  →   if(cn.hutool.core.util.StrUtil.isNotEmpty($expr$)){\
                                                                                $END$\
                                                        }														

.similar : ht>计算两个字符串的相似度
	java.lang.String [cn.hutool.core.util.StrUtil]  →  cn.hutool.core.util.StrUtil.similar($expr$, $arg$) 

.utf8Str : ht>将对象转为字符串
	java.lang.Object [cn.hutool.core.util.StrUtil]  →  cn.hutool.core.util.StrUtil.utf8Str($expr$) 

.getReader : ht>获得StringReader
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  cn.hutool.core.util.StrUtil.getReader($expr$) 

.strBuilder : ht>创建StrBuilder对象
	INT [cn.hutool.core.util.StrUtil]  →  cn.hutool.core.util.StrUtil.strBuilder($expr$) 

.format : ht>格式化文本,使用{varName}占位
	java.lang.CharSequence [cn.hutool.core.util.StrUtil]  →  cn.hutool.core.util.StrUtil.format($expr$, $arg$) 

.fillAfter : ht>将已有字符串填充为规定长度,如果已有字符串超过这个长度则返回这个字符串
	java.lang.String [cn.hutool.core.util.StrUtil]  →  cn.hutool.core.util.StrUtil.fillAfter($expr$, $arg$) 

.reverse : ht>反转字符串
	java.lang.String [cn.hutool.core.util.StrUtil]  →  cn.hutool.core.util.StrUtil.reverse($expr$) 

.fill : ht>将已有字符串填充为规定长度,如果已有字符串超过这个长度则返回这个字符串
	java.lang.String [cn.hutool.core.util.StrUtil]  →  cn.hutool.core.util.StrUtil.fill($expr$, $arg$) 

.str : ht>将byte数组转为字符串
	ARRAY [cn.hutool.core.util.StrUtil]  →  cn.hutool.core.util.StrUtil.str($expr$, $arg$) 
	java.lang.Object [cn.hutool.core.util.StrUtil]  →  cn.hutool.core.util.StrUtil.str($expr$, $arg$) 
	java.nio.ByteBuffer [cn.hutool.core.util.StrUtil]  →  cn.hutool.core.util.StrUtil.str($expr$, $arg$) 

.fillBefore : ht>将已有字符串填充为规定长度,如果已有字符串超过这个长度则返回这个字符串
	java.lang.String [cn.hutool.core.util.StrUtil]  →  cn.hutool.core.util.StrUtil.fillBefore($expr$, $arg$) 

.trim : ht>给定字符串数组全部做去首尾空格
	ARRAY [cn.hutool.core.util.StrUtil]  →  cn.hutool.core.util.StrUtil.trim($expr$) 

.builder : ht>创建StringBuilder对象
	INT [cn.hutool.core.util.StrUtil]  →  cn.hutool.core.util.StrUtil.builder($expr$) 

.toString : ht>调用对象的toString方法,null会返回"null"
	java.lang.Object [cn.hutool.core.util.StrUtil]  →  cn.hutool.core.util.StrUtil.toString($expr$) 

.isBlankIfStr : ht>如果对象是字符串是否为空白,空白的定义如下
	java.lang.Object [cn.hutool.core.util.StrUtil]  →  cn.hutool.core.util.StrUtil.isBlankIfStr($expr$) 

.isEmptyIfStr : ht>如果对象是字符串是否为空串,空的定义如下
	java.lang.Object [cn.hutool.core.util.StrUtil]  →  cn.hutool.core.util.StrUtil.isEmptyIfStr($expr$) 




